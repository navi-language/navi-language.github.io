{
  "$schema": "https://json.schemastore.org/tmlanguage.json",
  "$examples": [
    "https://github.com/microsoft/vscode/blob/main/extensions/rust/syntaxes/rust.tmLanguage.json",
    "https://github.com/microsoft/vscode/blob/main/extensions/typescript-basics/syntaxes/TypeScript.tmLanguage.json",
    "https://github.com/microsoft/vscode/blob/main/extensions/ruby/syntaxes/ruby.tmLanguage.json"
  ],
  "name": "Navi",
  "scopeName": "source.navi",
  "patterns": [
    {
      "comment": "boxed slice literal",
      "begin": "(<)(\\[)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.brackets.angle.navi"
        },
        "2": {
          "name": "punctuation.brackets.square.navi"
        }
      },
      "end": ">",
      "endCaptures": {
        "0": {
          "name": "punctuation.brackets.angle.navi"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#gtypes"
        },
        {
          "include": "#lvariables"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#types"
        }
      ]
    },
    {
      "comment": "exclamation dot",
      "match": "(\\!)(\\.)",
      "captures": {
        "1": {
          "name": "constant.numeric.decimal.exclamation.navi"
        },
        "2": {
          "name": "keyword.operator.access.dot.navi"
        }
      }
    },
    {
      "comment": "modules",
      "match": "(mod)\\s+((?:r#(?!self))?[a-z][A-Za-z0-9_]*)",
      "captures": {
        "1": {
          "name": "storage.type.navi"
        },
        "2": {
          "name": "entity.name.module.navi"
        }
      }
    },
    {
      "comment": "use statements",
      "name": "meta.use.navi",
      "begin": "\\b(use)\\s",
      "beginCaptures": {
        "1": {
          "name": "keyword.other.navi"
        }
      },
      "end": ";",
      "endCaptures": {
        "0": {
          "name": "punctuation.semi.navi"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#namespaces"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#types"
        },
        {
          "include": "#lvariables"
        }
      ]
    },
    {
      "include": "#comments"
    },
    {
      "include": "#attributes"
    },
    {
      "include": "#lvariables"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#gtypes"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#types"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#namespaces"
    },
    {
      "include": "#punctuation"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#variables"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "comment": "documentation comments",
          "name": "comment.line.documentation.navi",
          "match": "^\\s*///.*"
        },
        {
          "comment": "line comments",
          "name": "comment.line.double-slash.navi",
          "match": "\\s*//.*"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "comment": "ALL CAPS constants",
          "name": "constant.other.caps.navi",
          "match": "\\b[A-Z]{2}[A-Z0-9_]*\\b"
        },
        {
          "comment": "constant declarations",
          "match": "\\b(const)\\s+([A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "storage.type.navi"
            },
            "2": {
              "name": "constant.other.caps.navi"
            }
          }
        },
        {
          "comment": "decimal integers and floats",
          "name": "constant.numeric.decimal.navi",
          "match": "\\b\\d[\\d_]*(\\.?)[\\d_]*(?:(E|e)([+-]?)([\\d_]+))?(float|int)?\\b",
          "captures": {
            "1": {
              "name": "punctuation.separator.dot.decimal.navi"
            },
            "2": {
              "name": "keyword.operator.exponent.navi"
            },
            "3": {
              "name": "keyword.operator.exponent.sign.navi"
            },
            "4": {
              "name": "constant.numeric.decimal.exponent.mantissa.navi"
            },
            "5": {
              "name": "entity.name.type.numeric.navi"
            }
          }
        },
        {
          "comment": "hex integer constants",
          "name": "constant.numeric.hex.navi",
          "match": "(?x)\n  (?<![\\w\\.])\n    (0[xX]) (_?[0-9a-fA-F])+\n  \\b\n",
          "captures": {
            "1": {
              "name": "storage.type.number.navi"
            }
          }
        },
        {
          "comment": "octal integer constants",
          "name": "constant.numeric.oct.navi",
          "match": "(?x)\n  (?<![\\w\\.])\n    (0[oO]) (_?[0-7])+\n  \\b\n",
          "captures": {
            "1": {
              "name": "storage.type.number.navi"
            }
          }
        },
        {
          "comment": "binary integer constants",
          "name": "constant.numeric.bin.navi",
          "match": "(?x)\n  (?<![\\w\\.])\n    (0[bB]) (_?[01])+\n  \\b\n",
          "captures": {
            "1": {
              "name": "storage.type.number.navi"
            }
          }
        },
        {
          "comment": "Language constants",
          "match": "\\b(true|false|nil)\\b",
          "name": "constant.language.navi"
        }
      ]
    },
    "escapes": {
      "comment": "escapes: ASCII, byte, Unicode, quote, regex",
      "name": "constant.character.escape.navi",
      "match": "(\\\\)(?:(?:(x[0-7][\\da-fA-F])|(u(\\{)[\\da-fA-F]{4,6}(\\}))|.))",
      "captures": {
        "1": {
          "name": "constant.character.escape.backslash.navi"
        },
        "2": {
          "name": "constant.character.escape.bit.navi"
        },
        "3": {
          "name": "constant.character.escape.unicode.navi"
        },
        "4": {
          "name": "constant.character.escape.unicode.punctuation.navi"
        },
        "5": {
          "name": "constant.character.escape.unicode.punctuation.navi"
        }
      }
    },
    "attributes": {
      "comment": "attributes",
      "name": "meta.attribute.navi",
      "begin": "(#)(\\!?)(\\[)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.definition.attribute.navi"
        },
        "3": {
          "name": "punctuation.brackets.attribute.navi"
        }
      },
      "end": "\\]",
      "endCaptures": {
        "0": {
          "name": "punctuation.brackets.attribute.navi"
        }
      },
      "patterns": [
        {
          "include": "#comments"
        },
        {
          "include": "#keywords"
        },
        {
          "include": "#punctuation"
        },
        {
          "include": "#strings"
        },
        {
          "include": "#gtypes"
        },
        {
          "include": "#types"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "comment": "keyword as a function",
          "match": "\\b(pub|switch|while|catch|for|if)(\\()",
          "captures": {
            "1": {
              "name": "keyword.other.navi"
            },
            "2": {
              "name": "punctuation.brackets.round.navi"
            }
          }
        },
        {
          "comment": "function definition",
          "name": "meta.function.definition.navi",
          "begin": "\\b(fn)\\s+((?:r#(?!self))?[A-Za-z0-9_]+)((\\()|(<))",
          "beginCaptures": {
            "1": {
              "name": "keyword.other.fn.navi"
            },
            "2": {
              "name": "entity.name.function.navi"
            },
            "4": {
              "name": "punctuation.brackets.round.navi"
            },
            "5": {
              "name": "punctuation.brackets.angle.navi"
            }
          },
          "end": "\\{|;",
          "endCaptures": {
            "0": {
              "name": "punctuation.brackets.curly.navi"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#lvariables"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#gtypes"
            },
            {
              "include": "#functions"
            },
            {
              "include": "#namespaces"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#types"
            },
            {
              "include": "#variables"
            }
          ]
        },
        {
          "comment": "function/method calls, chaining",
          "name": "meta.function.call.navi",
          "begin": "((?:r#(?!self))?[A-Za-z0-9_]+)(\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.navi"
            },
            "2": {
              "name": "punctuation.brackets.round.navi"
            }
          },
          "end": "(\\))(\\!?)",
          "endCaptures": {
            "1": {
              "name": "punctuation.brackets.round.navi"
            },
            "2": {
              "name": "constant.numeric.decimal.exclamation.navi"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#attributes"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#lvariables"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#gtypes"
            },
            {
              "include": "#functions"
            },
            {
              "include": "#namespaces"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#types"
            },
            {
              "include": "#variables"
            }
          ]
        },
        {
          "comment": "function/method calls with turbofish",
          "name": "meta.function.call.navi",
          "begin": "((?:r#(?!self))?[A-Za-z0-9_]+)(?=::<.*>\\()",
          "beginCaptures": {
            "1": {
              "name": "entity.name.function.navi"
            }
          },
          "end": "(\\))(\\!?)",
          "endCaptures": {
            "1": {
              "name": "punctuation.brackets.round.navi"
            },
            "2": {
              "name": "constant.numeric.decimal.exclamation.navi"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#attributes"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#lvariables"
            },
            {
              "include": "#constants"
            },
            {
              "include": "#gtypes"
            },
            {
              "include": "#functions"
            },
            {
              "include": "#namespaces"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#strings"
            },
            {
              "include": "#types"
            },
            {
              "include": "#variables"
            }
          ]
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "comment": "control flow keywords",
          "name": "keyword.control.navi",
          "match": "\\b(break|case|catch|continue|default|default|defer|do|else|finally|for|if|in|loop|match|return|select|switch|try|while|panic|throw|throws)\\b"
        },
        {
          "comment": "Built-in functions",
          "match": "\\b(assert|assert_eq|assert_ne|error|print|println|trace)\\b",
          "name": "support.function.core.navi"
        },
        {
          "comment": "storage keywords",
          "name": "keyword.other.navi",
          "match": "\\b(bench|bool|const|enum|fn|impl|int|interface|let|number|pub|spawn|string|struct|test|type|use)\\b"
        },
        {
          "comment": "logical operators",
          "name": "keyword.operator.logical.navi",
          "match": "(\\^|\\||\\|\\||&&|<<|>>|!)(?!=)"
        },
        {
          "comment": "logical AND, borrow references",
          "name": "keyword.operator.borrow.and.navi",
          "match": "&(?![&=])"
        },
        {
          "comment": "assignment operators",
          "name": "keyword.operator.assignment.navi",
          "match": "(\\+=|-=|\\*=|/=|%=|\\^=|&=|\\|=|<<=|>>=)"
        },
        {
          "comment": "single equal",
          "name": "keyword.operator.assignment.equal.navi",
          "match": "(?<![<>])=(?!=|>)"
        },
        {
          "comment": "comparison operators",
          "name": "keyword.operator.comparison.navi",
          "match": "(=(=)?(?!>)|!=|<=|(?<!=)>=)"
        },
        {
          "comment": "math operators",
          "name": "keyword.operator.math.navi",
          "match": "(([+%]|(\\*(?!\\w)))(?!=))|(-(?!>))|(/(?!/))"
        },
        {
          "comment": "less than, greater than (special case)",
          "match": "(?:\\b|(?:(\\))|(\\])|(\\})))[ \\t]+([<>])[ \\t]+(?:\\b|(?:(\\()|(\\[)|(\\{)))",
          "captures": {
            "1": {
              "name": "punctuation.brackets.round.navi"
            },
            "2": {
              "name": "punctuation.brackets.square.navi"
            },
            "3": {
              "name": "punctuation.brackets.curly.navi"
            },
            "4": {
              "name": "keyword.operator.comparison.navi"
            },
            "5": {
              "name": "punctuation.brackets.round.navi"
            },
            "6": {
              "name": "punctuation.brackets.square.navi"
            },
            "7": {
              "name": "punctuation.brackets.curly.navi"
            }
          }
        },
        {
          "comment": "namespace operator",
          "name": "keyword.operator.namespace.navi",
          "match": "::"
        },
        {
          "comment": "dereference asterisk",
          "match": "(\\*)(?=\\w+)",
          "captures": {
            "1": {
              "name": "keyword.operator.dereference.navi"
            }
          }
        },
        {
          "comment": "subpattern binding",
          "name": "keyword.operator.subpattern.navi",
          "match": "@"
        },
        {
          "comment": "dot access",
          "name": "keyword.operator.access.dot.navi",
          "match": "\\.(?!\\.)"
        },
        {
          "comment": "ranges, range patterns",
          "name": "keyword.operator.range.navi",
          "match": "\\.{2}(=|\\.)?"
        },
        {
          "comment": "colon",
          "name": "keyword.operator.key-value.navi",
          "match": ":(?!:)"
        },
        {
          "comment": "dashrocket, skinny arrow",
          "name": "keyword.operator.arrow.skinny.navi",
          "match": "\\)[\\s]*:"
        },
        {
          "comment": "hashrocket, fat arrow",
          "name": "keyword.operator.arrow.fat.navi",
          "match": "=>"
        },
        {
          "comment": "dollar macros",
          "name": "keyword.operator.macro.dollar.navi",
          "match": "\\$"
        },
        {
          "comment": "question mark operator, questionably sized, macro kleene matcher",
          "name": "keyword.operator.question.navi",
          "match": "\\?"
        }
      ]
    },
    "interpolations": {
      "comment": "String Interpolation Expressions, match `${1 + a}`",
      "name": "meta.interpolation.navi",
      "begin": "\\$\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.embedded.begin.navi"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.embedded.end.navi"
        }
      },
      "patterns": [
        {
          "include": "$self"
        }
      ],
      "contentName": "meta.embedded.line.navi"
    },
    "types": {
      "patterns": [
        {
          "comment": "numeric types",
          "match": "(?<![A-Za-z])(int|float)\\b",
          "captures": {
            "1": {
              "name": "entity.name.type.numeric.navi"
            }
          }
        },
        {
          "comment": "parameterized types",
          "begin": "\\b(_?[A-Z][A-Za-z0-9_]*)(<)",
          "beginCaptures": {
            "1": {
              "name": "entity.name.type.navi"
            },
            "2": {
              "name": "punctuation.brackets.angle.navi"
            }
          },
          "end": ">",
          "endCaptures": {
            "0": {
              "name": "punctuation.brackets.angle.navi"
            }
          },
          "patterns": [
            {
              "include": "#comments"
            },
            {
              "include": "#keywords"
            },
            {
              "include": "#lvariables"
            },
            {
              "include": "#punctuation"
            },
            {
              "include": "#types"
            },
            {
              "include": "#variables"
            }
          ]
        },
        {
          "comment": "primitive types",
          "name": "entity.name.type.primitive.navi",
          "match": "\\b(bool|string)\\b"
        },
        {
          "comment": "interface declarations",
          "match": "\\b(interface)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.interface.navi storage.type.navi"
            },
            "2": {
              "name": "entity.name.type.interface.navi"
            }
          }
        },
        {
          "comment": "struct declarations",
          "match": "\\b(struct)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.struct.navi"
            },
            "2": {
              "name": "entity.name.type.struct.navi"
            }
          }
        },
        {
          "comment": "enum declarations",
          "match": "\\b(enum)\\s+(_?[A-Z][A-Za-z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "keyword.declaration.enum.navi storage.type.navi"
            },
            "2": {
              "name": "entity.name.type.enum.navi"
            }
          }
        },
        {
          "comment": "types",
          "name": "entity.name.type.navi",
          "match": "\\b_?[A-Z][A-Za-z0-9_]*\\b(?!!)"
        }
      ]
    },
    "gtypes": {
      "patterns": []
    },
    "punctuation": {
      "patterns": [
        {
          "comment": "comma",
          "name": "punctuation.comma.navi",
          "match": ","
        },
        {
          "comment": "curly braces",
          "name": "punctuation.brackets.curly.navi",
          "match": "[{}]"
        },
        {
          "comment": "parentheses, round brackets",
          "name": "punctuation.brackets.round.navi",
          "match": "[()]"
        },
        {
          "comment": "exclamation",
          "name": "constant.numeric.decimal.exclamation.navi",
          "match": "\\!"
        },
        {
          "comment": "semicolon",
          "name": "punctuation.semi.navi",
          "match": ";"
        },
        {
          "comment": "square brackets",
          "name": "punctuation.brackets.square.navi",
          "match": "[\\[\\]]"
        },
        {
          "comment": "angle brackets",
          "name": "punctuation.brackets.angle.navi",
          "match": "(?<!=)[<>]"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "comment": "double-quoted strings and byte strings",
          "name": "string.quoted.double.navi",
          "begin": "(b?)(\")",
          "beginCaptures": {
            "1": {
              "name": "string.quoted.byte.raw.navi"
            },
            "2": {
              "name": "punctuation.definition.string.navi"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.navi"
            }
          },
          "patterns": [
            {
              "include": "#escapes"
            }
          ]
        },
        {
          "comment": "String Interpolation",
          "begin": "`",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.navi"
            }
          },
          "end": "`",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.navi"
            }
          },
          "name": "string.interpolation.navi",
          "patterns": [
            {
              "include": "#interpolations"
            }
          ]
        },
        {
          "comment": "Char",
          "name": "string.quoted.single.navi",
          "match": "'[^'\\\\]*(?:\\\\.[^'\\\\]*)*'"
        }
      ]
    },
    "lvariables": {
      "patterns": [
        {
          "comment": "self",
          "name": "variable.language.self.navi",
          "match": "\\bself\\b"
        }
      ]
    },
    "variables": {
      "patterns": [
        {
          "comment": "variables",
          "name": "variable.other.navi",
          "match": "\\b(?<!(?<!\\.)\\.)(?:r#(?!(self)))?[a-z0-9_]+\\b"
        }
      ]
    }
  }
}