#!/usr/bin/env sh
# Install Navi language into `$HOME/.navi/`.
set -u
type curl > /dev/null || { echo "curl: not found"; exit 1; }

repo='navi-language/navi'
app_name='Navi'
bin_name='navi'
tmpdir=.tmp_install

# request github api, and check if the response is ok
fetch_github_api() {
  url="$1"
  curl --silent --fail "$url" || { echo "Failed to fetch $url"; exit 1; }
}

get_latest_release() {
  fetch_github_api "https://api.github.com/repos/$repo/releases/latest" | # Get latest release from GitHub api
    grep '"tag_name":' |                                               # Get tag line
    sed -E 's/.*"([^"]+)".*/\1/'                                       # Pluck JSON value
}

get_last_nightly_release() {
  fetch_github_api "https://api.github.com/repos/$repo/releases" | # Get latest release from GitHub api
    grep '"tag_name":' |                                               # Get tag line
    sed -E 's/.*"([^"]+)".*/\1/' |                                       # Pluck JSON value
    grep "nightly" | head -n 1
}

# if args has version override it and not eq "latest"
if test $# -eq 1; then
  if test "$1" = "nightly"; then
    # curl -sSL https://navi-lang.org/install | sh -s -- nightly
    version=$(get_last_nightly_release)
  elif test "$1" != "latest"; then
    # curl -sSL https://navi-lang.org/install | sh -s -- v0.9.0-nightly
    version="$1"
  fi
else
  # curl -sSL https://navi-lang.org/install | sh
  version=$(get_latest_release)
fi

# if version is empty, exit
if test -z "$version"; then
  echo "Fetch version failed, please check your network."
  exit 1
fi

platform="$(uname | tr "[A-Z]" "[a-z]")"  # Linux => linux
arch="$(uname -m | sed 's/x86_64/amd64/')"  # x86_64 => amd64

if [ "$platform" = "darwin" ]; then
	platform="darwin"
  arch="amd64"
fi

libc=''
# if ldd --version 2>&1 | grep -q 'musl'; then
#   libc='-musl'
# fi

install() {
  echo "Downloading $bin_name@$version ..."
  download_url=https://github.com/$repo/releases/download/$version/$bin_name-$platform$libc-$arch.tar.gz
  echo $download_url

  mkdir -p $tmpdir && cd $tmpdir
  if curl --fail -Lo $bin_name.tar.gz $download_url; then
    echo "Download successfully."
  else
    echo "Download failed, please check your network."
    exit 1
  fi

  mkdir -p $HOME/.navi
  tar zxf $bin_name.tar.gz --directory $HOME/.navi && rm $bin_name.tar.gz
  cd .. && rm -Rf $tmpdir
  echo "$app_name $version has installed to \`$HOME/.navi\`."
}

# Check if PATH not contains $HOME/.navi, then add PATH=$HOME/.navi:$PATH
setup_path() {
  path_info="export PATH=\$HOME/.navi:\$PATH"
  source_file=.bashrc
  for file in .bash_profile .zshrc .bashrc .profile; do
    if test -f $HOME/$file; then
      source_file=$file
      # Ignore if the source file already contains $path_info
      if ! grep -q "$path_info" $HOME/$source_file; then
        echo "Add \`$path_info\` to \`$HOME/$source_file\`"
        echo $path_info >> $HOME/$source_file
        break
      fi
    fi
  done
  
  export PATH=$HOME/.navi:$PATH
}

install
setup_path

echo "Navi has installed successfully."
echo "Run \`$bin_name -h\` to get help."
echo ""