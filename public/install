#!/usr/bin/env bash
set -u

repo='navi-language/navi'
app_name='Navi'
bin_name='navi'
tmpdir=.tmp_install

if [[ ${OS:-} = Windows_NT ]]; then
    echo 'error: Please install using Windows Subsystem for Linux'
    exit 1
fi

type curl > /dev/null || { echo "curl: not found"; exit 1; }

# Reset
Color_Off=''
Color_Red=''
Color_Green=''
Color_Dim=''

if [[ -t 1 ]]; then
    # Reset
    Color_Off='\033[0m' # Text Reset

    # Regular Colors
    Color_Red='\033[0;31m'   # Red
    Color_Green='\033[0;32m' # Green
    Color_Dim='\033[0;2m'    # White
fi

error() {
    echo -e "${Color_Red}$@ ${Color_Off}" >&2
    exit 1
}

info() {
    echo -e "${Color_Dim}$@ ${Color_Off}"
}

success() {
    echo -e "${Color_Green}$@ ${Color_Off}"
}

# request github api, and check if the response is ok
fetch_github_api() {
  url="$1"
  curl --silent --fail "$url" || { error "Failed to fetch $url"; exit 1; }
}

get_latest_release() {
  fetch_github_api "https://api.github.com/repos/$repo/releases/latest" | # Get latest release from GitHub api
    grep '"tag_name":' |                                               # Get tag line
    sed -E 's/.*"([^"]+)".*/\1/'                                       # Pluck JSON value
}

get_last_nightly_release() {
  fetch_github_api "https://api.github.com/repos/$repo/releases" | # Get latest release from GitHub api
    grep '"tag_name":' |                                               # Get tag line
    sed -E 's/.*"([^"]+)".*/\1/' |                                       # Pluck JSON value
    grep "nightly" | head -n 1
}

get_version() {
  # if args has version override it and not eq "latest"
  if test $# -eq 1; then
    if test "$1" = "nightly"; then
      # curl -sSL https://navi-lang.org/install | bash -s -- nightly
      version=$(get_last_nightly_release)
    elif test "$1" != "latest"; then
      # curl -sSL https://navi-lang.org/install | bash -s -- v0.9.0-nightly
      version="$1"
    fi
  else
    # curl -sSL https://navi-lang.org/install | bash
    version=$(get_latest_release)
  fi

  # if version is empty, exit
  if test -z "$version"; then
    error "Fetch version failed, please check your network."
    exit 1
  fi
}

get_platform() {
  platform="$(uname | tr "[A-Z]" "[a-z]")"  # Linux => linux
  if [ "$platform" = "darwin" ]; then
    platform="darwin"
    arch="amd64"
  fi
}


# Install specific version
# curl -sSL https://navi-lang.org/install | bash -s -- v0.9.0-nightly arch=arm
# curl -sSL https://navi-lang.org/install | bash -s -- v0.9.0-nightly arch=x64
# curl -sSL https://navi-lang.org/install | bash -s -- latest arch=x64
get_arch() {
  arch="$(uname -m)"

  # Temporary fix for Apple Silicon default install amd64
  # TODO: This will remove after we done the arm64 call stack error info.
  if [ "$platform" = "darwin" ]; then
    arch="amd64"
  fi

  # Check if ARM=1 env is set
  # ARM=1 curl -sSL https://navi-lang.org/install | bash
  if [ ${ARM:-0} = "1" ]; then
    arch="arm64"
  fi

  # x86_64 => amd64
  if [ "$arch" = "x86_64" ]; then
    arch="amd64"
  fi
}

get_libc() {
  libc=''
  # if ldd --version 2>&1 | grep -q 'musl'; then
  #   libc='-musl'
  # fi
}

install() {
  name_suffix="$platform$libc-$arch"
  info "Downloading $bin_name@$version ($name_suffix)..."
  download_url=https://github.com/$repo/releases/download/$version/$bin_name-$name_suffix.tar.gz

  mkdir -p $tmpdir && cd $tmpdir
  if ! curl --fail --progress-bar -Lo $bin_name.tar.gz $download_url; then
    error "${Color_Red}Download failed, please check your network.${Color_Off}"
    exit 1
  fi

  mkdir -p $HOME/.navi
  tar zxf $bin_name.tar.gz --directory $HOME/.navi && rm $bin_name.tar.gz
  cd .. && rm -Rf $tmpdir
}

# Check if PATH not contains $HOME/.navi, then add PATH=$HOME/.navi:$PATH
setup_path() {
  path_info="export PATH=\$HOME/.navi:\$PATH"
  source_file=.bashrc
  for file in .bash_profile .bashrc .profile; do
    if test -f $HOME/$file; then
      source_file=$file
      # Ignore if the source file already contains $path_info
      if ! grep -q "$path_info" $HOME/$source_file; then
        info ""
        info "Add \`$path_info\` to \`$HOME/$source_file\`"
        echo $path_info >> $HOME/$source_file
        info "Run \`$path_info\` to take effect." 
        
        break
      fi
    fi
  done
  
  export PATH=$HOME/.navi:$PATH
}

get_version $@
get_platform $@
get_arch $@
get_libc $@
install $@
setup_path $@

info ""
success "$app_name was installed successfully to \`$HOME/.navi\`."
info "Run \`$bin_name -h\` to get help."
info ""