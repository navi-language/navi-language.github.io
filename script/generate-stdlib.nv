use std.fs.{self, File};
use std.io;
use std.json;
use std.log.{self, Level, Logger};
use std.net.http;
use std.path;
use std.time.{self, DateTime};

use markdown.{bold, bulleted_list, callout, codeblock, frontmatter, heading, link, ordered_list};
use navi.{
    Assign,
    Enum,
    Function,
    Interface,
    InterfaceMethods,
    Methods,
    Module,
    parse_stdlib,
    Stdlib,
    Struct,
    Type
};
use string_buffer.{StringBuffer};
use utils.{escape_html, format_anchor, format_doc, format_slug};

const STDLIB_TARGET = "stdlib";
const PKG_TARGET = "pkg";
const INDOC_HEADING_LEVEL = 2;

/// The logger instance output to stdout with trace level.
const log = Logger.new(io.stdout(), max_level: Level.Trace);

fn main() throws {
    log.info("Generating stdlib docs...");
    let start = DateTime.now();

    let parsed = try parse_stdlib("/Users/jason/github/navi-website/stdlib.json");
    try generate_modules(STDLIB_TARGET, parsed.stdlib);
    log.info("");
    try generate_modules(PKG_TARGET, parsed.pkg);

    let duration = DateTime.now().sub(start);
    log.info(`Stdlib docs generated. ${duration}`);
    time.sleep(5.seconds());
}

fn generate_modules(target: string, modules: <string, Module>) throws {
    let module_names = modules.keys();
    log.info(`Generating stdlib docs to '${target}/'...`);
    log.info(`Total modules: ${module_names.len()}`);

    let module_index = build_module_index(modules);
    let index_filename = path.join(target, "index.md");
    try fs.create_dir_all(path.dir(index_filename));
    try fs.write_string(index_filename, module_index);

    for (let fname, module in modules) {
        if (fname == "#prelude") {
            fname = "prelude";
        }
        let filename = path.join(target, fname + ".md");
        try fs.create_dir_all(path.dir(filename));

        log.info(`-> ${fname}`);
        let body = build_body(module);
        try fs.write_string(filename, body);
    }
}

fn build_module_index(stdlib: Stdlib): string {
    let buf = StringBuffer.new();
    let names: [string] = [];
    for (let fname, module in stdlib) {
        names.push(fname);
    }
    let items = names.sort().map::<string, string>(|name| {
        return `[${name}](./${name}.md)`;
    });
    buf.writeln(bulleted_list(items));
    return buf.to_string("");
}

fn build_body(module: Module): string {
    let buf = StringBuffer.new();
    let links = StringBuffer.new();

    // Frontmatter
    // #prelude is a special module name
    let title = module.name.replace("#", "");
    buf.writeln(frontmatter({"title": title, "editLink": false}));

    // Import Component
    buf.write(`<script setup>\nimport FunctionTitle from '../src/components/FunctionTitle.vue'\n</script>\n`);

    buf.write(heading(module.name, level: 1));

    buf.write(generate_type_toc(module, module.types));
    buf.write(generate_assign_toc(module, module.assigns));
    buf.write(generate_enum_toc(module, module.enums));
    buf.write(generate_interface_toc(module, module.interfaces));
    buf.write(generate_struct_toc(module, module.structs));
    buf.write(generate_module_function_toc(module, module.functions));

    for (let func in module.functions) {
        buf.write(generate_function_doc(func, links));
    }

    buf.write(generate_types(module, module.types, links));
    buf.write(generate_enums(module, module.enums, links));
    buf.write(generate_interfaces(module, module.interfaces, links));
    buf.write(generate_assigns(module, module.assigns, links));
    buf.write(generate_structs(module, module.structs, links));

    buf.writeln("");
    buf.write(links.to_string("\n"));

    return buf.to_string("\n");
}

/// Generate the Type
fn generate_types(module: Module, types: <string, Type>, links: StringBuffer): string {
    if (types.len() == 0) {
        return "";
    }

    let type_names = types.keys().sort();

    let buf = StringBuffer.new();
    for (let name in type_names) {
        let _type = types[name];
        buf.writeln(heading(`type ${name}`, level: 2, anchor: `${module.name}.${name}`));
        buf.writeln(codeblock(_type.source));
        buf.writeln(_type.doc.unwrap_or("No documentation available."));
        buf.writeln("");

        buf.writeln(generate_methods(name, _type.methods, links, level: 3));
        buf.writeln(generate_interface_methods(name, _type.interface_methods, links, level: 3));
    }

    return buf.to_string("");
}

/// Generate methods
fn generate_methods(
    type_name: string,
    methods: Methods,
    links: StringBuffer,
    level: int = 3,
    title: string = "Methods"
): string {
    if (methods.len() == 0) {
        return "";
    }

    let buf = StringBuffer.new();

    buf.writeln(bold(title));

    let static_methods: [string] = [];
    let instance_methods: [string] = [];

    for (let name, func in methods) {
        if (func.kind == "static_method") {
            static_methods.push(name);
        } else {
            instance_methods.push(name);
        }
    }
    static_methods.sort();
    instance_methods.sort();

    for (let name in static_methods) {
        let func = methods[name];
        buf.write(generate_function_doc(
            func,
            links,
            level:,
            anchor_prefix: `${type_name}.`,
            kind: "static_method"
        ));
    }

    for (let name in instance_methods) {
        let func = methods[name];
        buf.write(generate_function_doc(
            func,
            links,
            level:,
            anchor_prefix: `${type_name}#`,
            kind: "method"
        ));
    }
    buf.writeln("");

    return buf.to_string("");
}

/// Generate interface methods
fn generate_interface_methods(
    type_name: string, interface_methods: InterfaceMethods, links: StringBuffer, level: int = 3
): string {
    if (interface_methods.len() == 0) {
        return "";
    }

    let buf = StringBuffer.new();
    buf.writeln(bold("Interface Implementations"));
    buf.writeln("");

    let interface_names = interface_methods.keys().sort();

    for (let interface_name in interface_names) {
        let methods = interface_methods[interface_name];
        buf.writeln(generate_methods(
            type_name,
            methods,
            links,
            level:,
            title: `impl ${interface_name} for ${type_name}`
        ));
    }

    return buf.to_string("");
}

/// To generate Types Toc.
fn generate_type_toc(module: Module, types: <string, Type>): string {
    if (types.len() == 0) {
        return "";
    }

    let type_names = types.keys().sort();

    let buf = StringBuffer.new();

    buf.writeln(bold("Types"));
    buf.writeln("");

    let result: [string] = [];
    for (let name in type_names) {
        let _type = types[name];
        let anchor = format_anchor(`${module.name}.${_type.name}`);
        result.push(link(_type.name, `#${anchor}`));
    }

    buf.write(result.join(", "));
    buf.write("\n");

    return buf.to_string("");
}

fn generate_enums(module: Module, enums: <string, Enum>, links: StringBuffer): string {
    let buf = StringBuffer.new();

    let enum_names = enums.keys().sort();

    for (let enum_name in enum_names) {
        const info = enums[enum_name];

        buf.writeln(heading(enum_name, level: 2, anchor: `${module.name}.${enum_name}`));
        buf.writeln(codeblock(info.source));

        if (let doc = info.doc) {
            buf.writeln(format_doc(doc, level: 3));
        } else {
            buf.writeln(`No documentation.`);
        }

        buf.writeln(generate_methods(info.name, info.methods, links, level: 3));
        buf.writeln(generate_interface_methods(info.name, info.interface_methods, links, level: 3));
    }

    return buf.to_string("");
}

fn generate_enum_toc(module: Module, enums: <string, Enum>): string {
    if (enums.len() == 0) {
        return "";
    }

    let enum_names = enums.keys().sort();

    let buf = StringBuffer.new();
    buf.writeln(bold("Enums"));
    buf.writeln("");

    let result: [string] = [];
    for (let name in enum_names) {
        let _enum = enums[name];
        let anchor = format_anchor(`${module.name}.${name}`);
        result.push(link(name, `#${anchor}`));
    }

    buf.write(result.join(", "));
    buf.write("\n");

    return buf.to_string("");
}

fn generate_assigns(module: Module, assigns: <string, Assign>, links: StringBuffer): string {
    let buf = StringBuffer.new();

    let assign_names = assigns.keys().sort();

    for (let assign_name in assign_names) {
        const info = assigns[assign_name];

        buf.writeln(heading(assign_name, level: 2, anchor: `${module.name}.${assign_name}`));
        buf.writeln(codeblock(info.source));

        if (let doc = info.doc) {
            buf.writeln(format_doc(doc, level: 3));
        } else {
            buf.writeln(`No documentation.`);
        }
    }

    return buf.to_string("");
}

fn generate_assign_toc(module: Module, assigns: <string, Assign>): string {
    if (assigns.len() == 0) {
        return "";
    }

    let assign_names = assigns.keys().sort();

    let buf = StringBuffer.new();
    buf.writeln(bold("Consts"));
    buf.writeln("");

    let result: [string] = [];
    for (let assign_name in assign_names) {
        let anchor = format_anchor(`${module.name}.${assign_name}`);
        result.push(link(assign_name, `#${anchor}`));
    }

    buf.write(result.join(", "));
    buf.write("\n");

    return buf.to_string("");
}

fn generate_interfaces(
    module: Module, interfaces: <string, Interface>, links: StringBuffer
): string {
    let buf = StringBuffer.new();

    let interface_names = interfaces.keys().sort();

    for (let interface_name in interface_names) {
        const info = interfaces[interface_name];

        buf.write(heading(interface_name, level: 2, anchor: `${module.name}.${interface_name}`));
        buf.write(codeblock(info.source));

        if (let doc = info.doc) {
            buf.writeln(format_doc(doc, level: 3));
        } else {
            buf.writeln(`No documentation.`);
        }

        let method_names = info.methods.keys().sort();

        for (let name in method_names) {
            let method = info.methods[name];
            buf.write(generate_function_doc(method, links, level: 3));
        }
    }

    return buf.to_string("");
}

fn generate_interface_toc(module: Module, interfaces: <string, Interface>): string {
    if (interfaces.len() == 0) {
        return "";
    }

    let names = interfaces.keys().sort();

    let buf = StringBuffer.new();
    buf.writeln(bold("Interfaces"));
    buf.writeln("");

    let result: [string] = [];
    for (let name in names) {
        let _interface = interfaces[name];
        let anchor = format_anchor(`${module.name}.${name}`);
        result.push(link(name, `#${anchor}`));
    }

    buf.write(result.join(", "));
    buf.write("\n");

    return buf.to_string("");
}

fn generate_structs(module: Module, structs: <string, Struct>, links: StringBuffer): string {
    let buf = StringBuffer.new();

    let struct_names = structs.keys().sort();

    for (let struct_name in struct_names) {
        const info = structs[struct_name];

        buf.writeln(heading(info.name, level: 2, anchor: `${module.name}.${info.name}`));
        buf.writeln(codeblock(info.source));

        if (let doc = info.doc) {
            buf.writeln(format_doc(doc, level: 4));
        } else {
            buf.writeln(`No documentation.`);
        }

        buf.write(generate_struct_member_toc(info.name, info));

        if (info.properties.len() > 0) {
            let names = info.properties.keys().sort();

            for (let name in names) {
                let prop = info.properties[name];

                let prop_suffix: [string] = [];
                if (prop.getter) {
                    prop_suffix.push("get");
                }

                if (prop.setter) {
                    prop_suffix.push("set");
                }
                let suffix_str = "";
                if (prop_suffix.len() > 0) {
                    suffix_str = `${prop_suffix.join(", ")}`;
                }
                buf.writeln(heading(`self.${name}`, level: 3, anchor: `${info.name}#${name}`));
                buf.writeln(codeblock(`${prop.name} : ${prop._type}`));

                if (prop.doc != nil) {
                    buf.writeln("");
                    buf.writeln(`    ` + format_doc(prop.doc, level: 3));
                }
            }

            buf.write("\n");
        }

        buf.writeln(generate_methods(info.name, info.methods, links, level: 3));
        buf.writeln(generate_interface_methods(info.name, info.interface_methods, links, level: 3));
    }

    return buf.to_string("\n");
}

/// To generate Struct Toc on module top.
fn generate_struct_toc(module: Module, structs: <string, Struct>): string {
    if (structs.len() == 0) {
        return "";
    }

    let struct_names = structs.keys().sort();

    let buf = StringBuffer.new();

    buf.writeln(bold("Structs"));
    buf.writeln("");

    let result: [string] = [];
    for (let name in struct_names) {
        let _struct = structs[name];
        let anchor = format_anchor(`${module.name}.${_struct.name}`);
        result.push(link(_struct.name, `#${anchor}`));
    }

    buf.writeln(result.join(", "));
    return buf.to_string("");
}

/// To generate Function Toc on module top.
fn generate_module_function_toc(module: Module, functions: [Function]): string {
    if (functions.len() == 0) {
        return "";
    }

    let buf = StringBuffer.new();

    buf.writeln(bold("Module Functions"));
    buf.writeln("");

    let names: [string] = [];
    for (let _fn in functions) {
        names.push(_fn.name);
    }
    names.sort();

    let fn_names: [string] = [];
    for (let name in names) {
        fn_names.push(link(name, `#${name}`));
    }
    buf.writeln(fn_names.join(", "));
    return buf.to_string("");
}

/// Generate the struct properties and methods toc.
fn generate_struct_member_toc(struct_name: string, info: Struct): string {
    let buf = StringBuffer.new();

    if (info.properties.len() > 0) {
        buf.writeln(bold("Properties"));
        buf.writeln("");

        let prop_names: [string] = [];
        for (let name, prop in info.properties) {
            prop_names.push(link(name, `#${struct_name}#${name}`));
        }
        buf.writeln(prop_names.join(", "));
        buf.writeln("");
    }

    if (info.methods.len() > 0) {
        buf.writeln(bold("Methods"));
        buf.writeln("");

        let methods: [string] = [];

        for (let name, func in info.methods) {
            methods.push(name);
        }
        methods.sort();

        let method_links: [string] = [];
        for (let name in methods) {
            let func = info.methods[name];
            let anchor = format_anchor(`${struct_name}.${name}`);
            if (func.kind == "method") {
                anchor = format_anchor(`${struct_name}#${name}`);
            }
            method_links.push(link(name, `#${anchor}`));
        }
        buf.writeln(method_links.join(", "));
        buf.writeln("");
    }

    return buf.to_string("");
}

/// Generate a Function doc.
fn generate_function_doc(
    f: Function,
    links: StringBuffer,
    level: int = 2,
    anchor_prefix: string = "",
    kind: string = "function"
): string {
    let buf = StringBuffer.new();

    // Write method heading
    let anchor = `${anchor_prefix}${f.name}`;
    buf.write(`<FunctionTitle title="${f.name}" level="${level}" anchor="${format_anchor(anchor)}">\n`);
    let source = generate_function(f);
    buf.write(heading(f.name, level:, anchor:));
    buf.write(codeblock(source));
    buf.write("</FunctionTitle>\n");

    links.write(`[${f.name}]: #${anchor}`);

    if (f.desc.deprecated != nil) {
        buf.write(callout(f.desc.deprecated!, kind: "warning", title: "Deprecated"));
    }

    if (let doc = f.desc.doc) {
        buf.write(format_doc(doc, level: level + 1));
    } else {
        buf.write("_No documentation._");
    }
    buf.writeln("");

    return buf.to_string("\n");
}

fn generate_function(f: Function): string {
    let prefix = "";
    if (f.desc._async) {
        prefix = "async ";
    }

    let return_str = f.desc.return_type.map(|s| `: ${s}`) || "";
    let args = f.desc.args;

    let args_str = StringBuffer.new();

    for (let arg in args) {
        let default_value = "";
        if (arg.default_value != nil) {
            default_value = ` = ${arg.default_value || ""}`;
        }

        if (arg._type == "self") {
            args_str.write("self");
        } else {
            switch (arg.kind) {
                case "arbitrary":
                    args_str.write(`${arg.name}: ..${arg._type}${default_value}`);
                default:
                    args_str.write(`${arg.name}: ${arg._type}${default_value}`);
            }
        }

    }
    let args_str = args_str.to_string(", ");

    let throws_str = f.desc._throws.map(|items| {
        if (items.is_empty()) {
            return " throws";
        } else {
            return ` throws ${items.join(", ")}`;
        }
    }) || "";

    return `pub ${prefix}fn ${f.name}(${args_str})${return_str}${throws_str}`;
}

test "generate_function" {
    let func: Function = {
        kind: "function",
        name: "say_name",
        desc: {
            doc: "Say hello to name.",
            args: [
                {name: "self", _type: "self"},
                {name: "name", _type: "string"},
                {
                    name: "suffix",
                    _type: "string",
                    default_value: `"!"`,
                },
            ],
            return_type: "string",
            deprecated: "Use `say_name2` instead.",
            _async: true,
        },
        module: "",
    };

    assert_eq generate_function(func), `pub async fn say_name(self, name: string, suffix: string = "!"): string`;

    func.desc._async = false;
    func.desc._throws = [];
    assert_eq generate_function(func), `pub fn say_name(self, name: string, suffix: string = "!"): string throws`;

    func.desc._throws = ["Error1", "Error2"];
    func.desc.return_type = nil;
    assert_eq generate_function(func), `pub fn say_name(self, name: string, suffix: string = "!") throws Error1, Error2`;
}
