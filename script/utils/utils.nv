use std.regex.{Regex, Captures};
use std.io.{self, StringBuffer};

let heading_re = try! Regex.new(r`(?m)^\s*([#]+)\s*`);

/// Replace all headings in a markdown document with headings of a different level.
///
/// `level` - The parent level.
pub fn replace_headings(body: string?, level: int = 1): string {
    if (body == nil) {
        return "";
    }

    // Get the root heading level in the body
    let all_headings = heading_re.find_all(body!);
    let root_level = 0;
    for (let m in all_headings) {
        let indent_level = m.text.len();
        if (indent_level < root_level || root_level == 0) {
            root_level = indent_level;
        }
    }
    let offset_level = level + 1 - root_level;

    let result = heading_re.replace_all_with(body!, |caps| {
        let p0 = caps?.get(0)!.text;
        let p1 = caps?.get(1)!.text;
        let indent_level = p1.len() + offset_level + 1;
        return p0.replace(p1, "#".repeat(indent_level));
    });

    return result;
}

/// Escape HTML
pub fn escape_html(text: string?): string {
    if (text == nil) {
        return "";
    }

    return text!.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");
}

let SLUGIFY_RE = try! Regex.new(`[^\\w\\-_]`);
pub fn format_slug(text: string?): string {
    if (text == nil) {
        return "";
    }

    return SLUGIFY_RE.replace_all(text!, "_");
}

let ANCHOR_MAPS = <string, string> {
    "[": "%5B",
    "]": "%5D",
    "<": "%3C",
    ">": "%3E",
    "%": "%25",
    " ": "-"
};

/// Replace all non-alphanumeric characters with `-`
///
/// e.g. `foo.bar.dar` => `foo-bar-dar`
pub fn format_anchor(text: string?): string {
    if (text == nil) {
        return "";
    }

    let buf = StringBuffer.new();
    for (let s in text!.split("")) {
        if (let new_str = ANCHOR_MAPS.get(s)) {
            try! buf.write_string(new_str);
        } else {
            try! buf.write_string(s);
        }
    }

    return buf.to_string();
}

test "replace_headings" {
    let raw = "# heading 1\n\n## heading 2\n\n## heading 2.1\n\n### heading 3";
    assert_eq replace_headings(raw, level: 2), "### heading 1\n\n#### heading 2\n\n#### heading 2.1\n\n##### heading 3";
    assert_eq replace_headings(raw, level: 3), "#### heading 1\n\n##### heading 2\n\n##### heading 2.1\n\n###### heading 3";

    let raw = "## heading 2\n\n### heading 2.1\n\n#### heading 3";
    assert_eq replace_headings(raw, level: 1), "## heading 2\n\n### heading 2.1\n\n#### heading 3";
    assert_eq replace_headings(raw, level: 3), "#### heading 2\n\n##### heading 2.1\n\n###### heading 3";
}

test "format_slug" {
    let raw = "foo.bar.dar";
    let expected = "foo_bar_dar";
    let result = format_slug(raw);
    assert_eq result, expected;
}

test "format_anchor" {
    assert_eq format_anchor("foo & bar"), "foo-&-bar";
    assert_eq format_anchor("foo % bar"), "foo-%25-bar";
    assert_eq format_anchor("foo < bar"), "foo-%3C-bar";
    assert_eq format_anchor("foo > bar"), "foo-%3E-bar";
    assert_eq format_anchor("foo [ bar"), "foo-%5B-bar";
    assert_eq format_anchor("foo ] bar"), "foo-%5D-bar";
    assert_eq format_anchor("foo   bar"), "foo---bar";
}

test "escape_html" {
    let raw = "<div>foo & bar</div>";
    let expected = "&lt;div&gt;foo &amp; bar&lt;/div&gt;";
    let result = escape_html(raw);
    assert_eq result, expected;
}

bench "replace_headings" {
    let raw = "# heading 1\n\n## heading 2\n\n## heading 2.1\n\n### heading 3";
    let expected = "### heading 1\n\n#### heading 2\n\n#### heading 2.1\n\n##### heading 3";
    bench.run(|| {
        replace_headings(raw, level: 2);
    });
}

bench "format_anchor" {
    let raw = "foo.bar.dar";
    let expected = "foo_bar_dar";
    bench.run(|| {
        format_anchor(raw);
    });
}
