use std.regex.{Regex, Captures};
use std.io;

let heading_re = try! Regex.new("(?m)^\\s*([#]+)\\s*");

/// Replace all headings in a markdown document with headings of a different level.
fn replace_headings(body: string?, level: int = 1): string {
    if (body == nil) {
        return "";
    }

    let result = heading_re.replace_all_with(body!, fn(caps: Captures?): string {
        let p0 = caps?.get(0)!.text;
        let p1 = caps?.get(1)!.text;
        let indent_level = p1.len() + level;
        return p0.replace(p1, "#".repeat(indent_level));
    });

    return result;
}

/// Escape HTML
fn escape_html(text: string?): string {
    if (text == nil) {
        return "";
    }

    return text!.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");
}

let SLUGIFY_RE = try! Regex.new(`[^\\w\\-_]`);
fn format_slug(text: string?): string {
    if (text == nil) {
        return "";
    }

    return SLUGIFY_RE.replace_all(text!, "_");
}

let ANCHOR_MAPS = <string, string> {
    "[": "%5B",
    "]": "%5D",
    "<": "%3C",
    ">": "%3E",
    " ": "-"
};

/// Replace all non-alphanumeric characters with `-`
///
/// e.g. `foo.bar.dar` => `foo-bar-dar`
fn format_anchor(text: string?): string {
    if (text == nil) {
        return "";
    }

    for (let k, v in ANCHOR_MAPS) {
        text = text!.replace(k, v);
    }

    return text!;
}

test "replace_headings" {
    let raw = "# heading 1\n\n## heading 2\n\n## heading 2.1\n\n### heading 3";
    let expected = "### heading 1\n\n#### heading 2\n\n#### heading 2.1\n\n##### heading 3";
    let result = replace_headings(raw, level: 2);
    assert_eq result, expected;
}

test "format_slug" {
    let raw = "foo.bar.dar";
    let expected = "foo_bar_dar";
    let result = format_slug(raw);
    assert_eq result, expected;
}

test "format_anchor" {

    let raw = "foo & bar";
    let expected = "foo-&-bar";
    let result = format_anchor(raw);
    assert_eq result, expected;
}

test "escape_html" {
    let raw = "<div>foo & bar</div>";
    let expected = "&lt;div&gt;foo &amp; bar&lt;/div&gt;";
    let result = escape_html(raw);
    assert_eq result, expected;
}

bench "replace_headings" {
    let raw = "# heading 1\n\n## heading 2\n\n## heading 2.1\n\n### heading 3";
    let expected = "### heading 1\n\n#### heading 2\n\n#### heading 2.1\n\n##### heading 3";
    bench.run(fn() {
        replace_headings(raw, level: 2);
    });
}

bench "format_anchor" {
    let raw = "foo.bar.dar";
    let expected = "foo_bar_dar";
    bench.run(fn() {
        format_anchor(raw);
    });
}
