use string_buffer.{StringBuffer};
use utils.{escape_html, format_anchor};

/// Render a Markdown heading.
///
/// The heading text will be escaped.
///
/// ```md
/// # Heading
/// ```
pub fn heading(title: string, level: int = 1, anchor: string? = nil): string {
    let heading_prefix = "#".repeat(level);
    let anchor_str = "";
    if (let anchor = anchor) {
        anchor_str = ` {#${format_anchor(anchor)}}`;
    }
    return `${heading_prefix} ${escape_html(title)}${anchor_str}\n`;
}

/// Render a Markdown code block.
pub fn codeblock(source: string?, language: string = "nv"): string {
    if (source?.len() == 0) {
        return "";
    }

    return `\`\`\`${language}\n${source || ""}\n\`\`\`\n`;
}

/// Render a Markdown callout.
///
/// ```md
/// ::: info, Title
/// This is a callout.
/// :::
/// ```
pub fn callout(content: string?, kind: string = "info", title: string? = nil): string {
    let title_str = "";
    if (let title = title) {
        title_str = `, ${title}`;
    }
    return `::: ${kind}${title_str}\n${content || ""}\n:::\n`;
}

/// Render a Markdown frontmatter.
///
/// ```md
/// ---
/// key: value
/// ---
/// ```
pub fn frontmatter(metadata: <string, ToString>): string {
    let buf = StringBuffer.new();
    buf.write("---\n");
    for (let key, value in metadata) {
        buf.write(`${key}: ${value.to_string()}\n`);
    }
    buf.write("---\n");
    return buf.to_string("");
}

/// Render a Markdown link.
pub fn link(text: string, url: string): string {
    return `[${escape_html(text)}](${url})`;
}

/// Render a Markdown bullet list.
pub fn bulleted_list(items: [string]): string {
    let buf = StringBuffer.new();
    for (let item in items) {
        buf.writeln(`- ${item}`);
    }
    return buf.to_string("");
}

/// Render a Markdown ordered list.
pub fn ordered_list(items: [string]): string {
    let buf = StringBuffer.new();
    let idx = 1;
    for (let item in items) {
        buf.writeln(`${idx}. ${item}`);
        idx += 1;
    }
    return buf.to_string("");
}

/// Render a Markdown bold text.
pub fn bold(text: string): string {
    return `**${text}**`;
}

test "heading" {
    assert_eq heading("Hello > world", level: 1), "# Hello &gt; world\n";
    assert_eq heading("Hello > world", level: 2, anchor: "hello-world"), "## Hello &gt; world {#hello-world}\n";
}

test "codeblock" {
    assert_eq codeblock("hello"), "```nv\nhello\n```\n";
    assert_eq codeblock("hello", language: "rust"), "```rust\nhello\n```\n";
}

test "callout" {
    assert_eq callout("hello"), "::: info\nhello\n:::\n";
    assert_eq callout("hello", kind: "warning"), "::: warning\nhello\n:::\n";
    assert_eq callout("hello", kind: "warning", title: "Title"), "::: warning, Title\nhello\n:::\n";
}

test "frontmatter" {
    assert_eq frontmatter({ "key": "value" }), "---\nkey: value\n---\n";
}

test "link" {
    assert_eq link("hello", "https://example.com"), "[hello](https://example.com)";
}

test "bulleted_list" {
    assert_eq bulleted_list({ "hello", "world" }), "- hello\n- world\n";
}

test "ordered_list" {
    assert_eq ordered_list({ "hello", "world" }), "1. hello\n2. world\n";
}

test "bold" {
    assert_eq bold("hello"), "**hello**";
}
